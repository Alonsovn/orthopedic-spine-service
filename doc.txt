# compose

---
version: '3'

services:

  app:
    container_name: mds_data_app
    build:
      context: .
      args:
        ENABLE_PROXY_PIP_CONF: 1
      dockerfile: Dockerfile
#      args:
#        http_proxy: ${http_proxy}
#        https_proxy: ${http_proxy}
#    env_file:
#      - ${PWD}/.env
    ports:
      - "8080:8080"

    postgres:
      image: postgres:latest
      container_name: postgres
      environment:
        POSTGRES_USER: admin
        POSTGRES_PASSWORD: admin
        POSTGRES_DB: mydatabase
      volumes:
        - pgdata:/var/lib/postgresql/data
      ports:
        - "5432:5432"

      pgadmin:
        image: dpage/pgadmin4:latest
        container_name: pgadmin
        environment:
          PGADMIN_DEFAULT_EMAIL: admin@example.com
          PGADMIN_DEFAULT_PASSWORD: admin
        ports:
          - "8080:80"
        depends_on:
          - postgres

    volumes:
      pgdata:






  # How to run:
# Go to project folder and run:
# docker-compose up --build
# podman compose build
 # podman compose up  --build





# Docker

# Use the official Python image from the Docker Hub
FROM python:3.11-slim

# Install bash
RUN apt-get update && apt-get install -y bash

WORKDIR /app

# Set build arguments
ARG ENABLE_PROXY_PIP_CONF

# Copy all potential pip configuration files to a temp location
COPY conf/pip /tmp/pip/

# Conditionally enable pip configuration based on the argument
RUN if [ "${ENABLE_PROXY_PIP_CONF}" = "1" ]; then \
        echo "Enabling proxy for pip configuration"; \
        mkdir -p /etc/pip && \
        cp /tmp/pip/proxy_pip.ini /etc/pip.conf; \
    else \
        echo "Enabling pip configuration"; \
        mkdir -p /etc/pip && \
        cp /tmp/pip/pip.ini /etc/pip.conf; \
    fi


# Copy the requirements file and install dependencies
COPY requirements.txt ./
RUN pip install --upgrade pip && \
    pip install --no-cache-dir --prefer-binary -v -r requirements.txt

# Copy the rest of the application code into the container
COPY . .


ENV PYTHONPATH=.
ENV PYTHONUNBUFFERED=TRUE
ENV PYTHONDONTWRITEBYTECODE=TRUE

# Add and configure a non-root user
RUN addgroup --system appuser && adduser --system --ingroup appuser -u 999 appuser

# Ensure the working directory is owned by the non-root user
RUN chown -R appuser:appuser /app && \
    chown -R appuser:appuser /tmp

COPY /start.sh /start.sh
RUN chmod a+x /start.sh

# Switch to the non-root user
USER 999

# Expose the application port
EXPOSE 5000

# Configure container start behaviour
ENTRYPOINT ["/start.sh"]



gunicorn config
import os

host = os.getenv("HOST", "0.0.0.0")
port = os.getenv("PORT", "8080")
bind_env = os.getenv("BIND", None)
use_loglevel = os.getenv("LOG_LEVEL", "info")

if bind_env:
    use_bind = bind_env
else:
    use_bind = f"{host}:{port}"

# Gunicorn config variables
bind = use_bind
